/*
260. 只出现一次的数字 III
给定一个整数数组 nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。

示例 :

输入: [1,2,1,3,2,5]
输出: [3,5]
来源：LeetCode
链接：https://leetcode-cn.com/problems/single-number-iii/
*/
class Solution {
public:
    vector<int> singleNumber(vector<int>& nums) {
        int ret = 0;
        for(int e : nums)
            ret ^= e; //ret为只出现一次的两个数字的^，记为数字a,b
        
        int k = ret & (-ret);
        vector<int> res(2, 0);
        for(int num : nums)
        {
            if(num & k)//第二组
                res[0] ^= num;
            else//第一组
                res[1] ^= num;
        }
        
        return res;
    }
};      //既然a,b 不一样，那么s肯定不是0，那么s的二进制肯定至少有1位（第n位）是1，只有0^1才等于1
        //所以a,b 在第n位，要么a是0，b是1 ，要么b是0，a是1    ---->A
        //s = 3 ^ 5; 0x0011 ^ 0x0101 = 0x0110 = 6
        //假设int是8位
        //-6  原码1000 0110
        //    反码1111 1001
        //    补码1111 1010
        //s & (-s)
        //  0000 0110
        //& 1111 1010
        //  0000 0010
        //所以k = s & (-s) 就是保留s的最后一个1，并且将其他位变为0  也就是s最后一个1是倒数第二位   --->B
        //由于s & (-s)很方便找到一个1 所以用他了，其实找到任何一个1都可以
        //根据A和B  我们可以确定 3 和 5 必定可以分到 不同的组里
        //同理 1和1 由于二进制完全相同，所有必定分到相同的组里
        //1  0001  第一组
        //2  0010  第二组
        //1  0001  第一组
        //3  0011  第二组
        //2  0010  第二组
        //5  0101  第一组
        //第一组 1 1 5  第二组 2 3 2 这样我们就将2个只有一个的数 分到了2个数组里了
  